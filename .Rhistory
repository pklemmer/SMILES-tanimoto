Tanimoto_coefficient[row] <- calculation
}
df_smiles <- cbind (df_smiles,Tanimoto_coefficient)
#Tanimoto_coefficient is added to the df_smiles for easier viewing
write.csv(df_smiles, file = "Tanimoto-coefficient-Rotenone.csv")
df_smiles_sorted <- df_smiles[order(df_smiles$Tanimoto_coefficient),]
View(df_smiles_sorted)
df_smiles_sorted <- df_smiles[order(df_smiles$-Tanimoto_coefficient),]
View(df_smiles_sorted)
df_smiles_sorted <- df_smiles[order(-df_smiles$Tanimoto_coefficient),]
View(df_smiles_sorted)
library(ggplot2)
autoplot(df_smiles_sorted)
geom_dotplot(data=ds_smiles)
geom_dotplot(data=df_smiles)
qplot(df_smiles)
p1 <- ggplot() + geom_bar(aes(y=Tanimoto_coefficient, x=PREFERRED.NAME), data = df_smiles)
p1
rlang::last_error()
p1 <- ggplot() + geom_bar(aes(y=Tanimoto_coefficient, x=PREFERRED NAME), data = df_smiles)
p1 <- ggplot() + geom_bar(aes(y=Tanimoto_coefficient, x="PREFERRED NAME"), data = df_smiles)
p1 <- ggplot() + geom_bar(aes(y=Tanimoto_coefficient, x="PREFERRED NAME"), data = df_smiles)
#Exports df_smiles_sorted to a .csv file with observations sorted in descending order according to their Tanimoto coefficient.
p1 <- ggplot() + geom_bar(aes(y=Tanimoto_coefficient, x="PREFERRED NAME"), data = df_smiles)
View(p1)
#Exports df_smiles_sorted to a .csv file with observations sorted in descending order according to their Tanimoto coefficient.
p1 <- ggplot() + geom_bar(aes(y=Tanimoto_coefficient, x="PREFERRED NAME"), data = df_smiles)
#Exports df_smiles_sorted to a .csv file with observations sorted in descending order according to their Tanimoto coefficient.
p1 <- ggplot() + geom_bar(aes(y=Tanimoto_coefficient, x="PREFERRED NAME"), data = df_smiles)
#Comments refer to the code above them.
#This script generates Tanimoto/Jaccard chemical similarity scores. Here, it is used to determine what molecules in the dataset are most chemically similar to a reference chemical.
sessionInfo()
install.packages("RxnSim")
#requires Rtools
install.packages("dplyr")
packages <- c("readr","dplyr","utils", "RxnSim", "ggplot2")
lapply(packages, library, character.only = TRUE)
#The previous 2 lines make it easier to load packages and libraries without needing to enter library() every time
Chemical_List_EPAPCS_2022_04_11 <- read_csv("C:/Chemical List EPAPCS-2022-04-11.csv")
df_smiles_unfiltered <- select(Chemical_List_EPAPCS_2022_04_11, "PREFERRED NAME", "SMILES")
df_smiles <- na.omit(df_smiles_unfiltered)
#Cleaning up dataset by removing all entries without SMILES
molA <- "[H][C@@]12COC3=C(C=C(OC)C(OC)=C3)[C@]1([H])C(=O)C1=CC=C3O[C@H](CC3=C1O2)C(C)=C"
#This is the SMILES for Rotenone; defining molA as another SMILES value allows for comparisons of all kinds of pesticides.
df_smiles <- data.frame(lapply(df_smiles, as.character), stringsAsFactors = FALSE)
#For some reason, the df is seen as tables, not characters. This function forces all values to be characters
Tanimoto_coefficient <- vector("numeric",nrow(df_smiles))
#Preparing a container for the calculated coefficient
for(row in 1:nrow(df_smiles)){
calculation<- ms.compute(molA, df_smiles[row,"SMILES"], standardize = FALSE)
#This line repeats ms.compute for each row of df_smiles so that a comparison between Rotenone (=molA) and all other (available) pesticides (="SMILES") is made
#RxnSim also allows comparisons between each pesticide in a list by using the ms.compute.sim.matrix function.
Tanimoto_coefficient[row] <- calculation
}
df_smiles <- cbind (df_smiles,Tanimoto_coefficient)
#Tanimoto_coefficient is added to the df_smiles for easier viewing
df_smiles_sorted <- df_smiles[order(-df_smiles$Tanimoto_coefficient),]
View(df_smiles_sorted)
write.csv(df_smiles_sorted, file = "Tanimoto-coefficient-Rotenone.csv")
#Exports df_smiles_sorted to a .csv file with observations sorted in descending order according to their Tanimoto coefficient.
p1 <- ggplot() + geom_bar(aes(y=Tanimoto_coefficient, x="PREFERRED NAME"), data = df_smiles)
install.packages("dplyr")
p1
#Exports df_smiles_sorted to a .csv file with observations sorted in descending order according to their Tanimoto coefficient.
preferred_name <- df_smiles[,1]
p1 <- ggplot() + geom_bar(aes(y=Tanimoto_coefficient, x=preferred_name), data = df_smiles)
p1
View(preferred_name)
p1 <- ggplot() + geom_bar(aes(y=Tanimoto_coefficient, x=nrow), data = df_smiles)
p1
p1 <- ggplot(data=df_smiles_sorted)+geom_col(mapping=aes(x=preferred_name, y=Tanimoto_coefficient))
p1
p1 <- ggplot(data=df_smiles_sorted)+geom_col(mapping=aes(x=reorder(preferred_name, tanimoto_coefficient), y=Tanimoto_coefficient))
p1
p1 <- ggplot(data=df_smiles_sorted)+geom_col(mapping=aes(x=preferred_name, y=Tanimoto_coefficient))
p1
df_plot <- within(df_smiles, preferred_name <- factor(preferred_name, levels=names(sort(df(position), decreasing = True))))
df_plot <- within(df_smiles, preferred_name <- factor(preferred_name, levels=names(sort(df(position), decreasing = TRUE))))
df_plot <- within(df_smiles, preferred_name <- factor(preferred_name, levels=names(sort(df(preferred_name), decreasing = TRUE))))
p1 <- ggplot(data=df_smiles_sorted)+geom_col(mapping=aes(x= reorder(preferred_name,-tanimoto_coefficient) y=Tanimoto_coefficient))
p1 <- ggplot(data=df_smiles_sorted)+geom_col(mapping=aes(x= reorder(preferred_name,-tanimoto_coefficient), y=Tanimoto_coefficient))
p1
p1 <- ggplot(data=df_smiles_sorted)+geom_col(mapping=aes(x= reorder(preferred_name,-Tanimoto_coefficient), y=Tanimoto_coefficient))
p1
View(Chemical_List_EPAPCS_2022_04_11)
ms.compute(molA, 'O=C2c5c(O[C@@H]3COc1cc(OC)c(OC)cc1[C@H]23)c4\C=C/C(Oc4cc5)(C)C', standardze = FALSE)
ms.compute(molA, 'COC1=C(OC)C=C2[C@H]3[C@@H](COC2=C1)OC1=C(C=CC2=C1C=CC(C)(C)O2)C3=O ', standardze = FALSE)
ms.compute(molA, 'COC1=C(OC)C=C2[C@H]3[C@@H](COC2=C1)OC1=C(C=CC2=C1C=CC(C)(C)O2)C3=O ', standardize = FALSE)
#Comments refer to the code above them.
#This script generates Tanimoto/Jaccard chemical similarity scores. Here, it is used to determine what molecules in the dataset are most chemically similar to a reference chemical.
sessionInfo()
install.packages("RxnSim")
#requires Rtools
install.packages("dplyr")
packages <- c("readr","dplyr","utils", "RxnSim", "ggplot2")
lapply(packages, library, character.only = TRUE)
#The previous 2 lines make it easier to load packages and libraries without needing to enter library() every time
Chemical_List_EPAPCS_2022_04_11 <- read_csv("C:/Chemical List EPAPCS-2022-04-11.csv")
df_smiles_unfiltered <- select(Chemical_List_EPAPCS_2022_04_11, "PREFERRED NAME", "SMILES")
df_smiles <- na.omit(df_smiles_unfiltered)
#Cleaning up dataset by removing all entries without SMILES
molA <- "[H][C@@]12COC3=C(C=C(OC)C(OC)=C3)[C@]1([H])C(=O)C1=CC=C3O[C@H](CC3=C1O2)C(C)=C"
#This is the SMILES for Rotenone; defining molA as another SMILES value allows for comparisons of all kinds of pesticides.
df_smiles <- data.frame(lapply(df_smiles, as.character), stringsAsFactors = FALSE)
#For some reason, the df is seen as tables, not characters. This function forces all values to be characters
Tanimoto_coefficient <- vector("numeric",nrow(df_smiles))
#Preparing a container for the calculated coefficient
for(row in 1:nrow(df_smiles)){
calculation<- ms.compute(molA, df_smiles[row,"SMILES"], standardize = FALSE)
#This line repeats ms.compute for each row of df_smiles so that a comparison between Rotenone (=molA) and all other (available) pesticides (="SMILES") is made
#RxnSim also allows comparisons between each pesticide in a list by using the ms.compute.sim.matrix function.
Tanimoto_coefficient[row] <- calculation
}
df_smiles <- cbind (df_smiles,Tanimoto_coefficient)
#Tanimoto_coefficient is added to the df_smiles for easier viewing
df_smiles_sorted <- df_smiles[order(-df_smiles$Tanimoto_coefficient),]
View(df_smiles_sorted)
write.csv(df_smiles_sorted, file = "Tanimoto-coefficient-Rotenone.csv")
#Exports df_smiles_sorted to a .csv file with observations sorted in descending order according to their Tanimoto coefficient.
preferred_name <- df_smiles[,1]
p1 <- ggplot(data=df_smiles_sorted)+geom_col(mapping=aes(x= reorder(preferred_name,-Tanimoto_coefficient), y=Tanimoto_coefficient))
p1
install.packages("dplyr")
#Comments refer to the code above them.
#This script generates Tanimoto/Jaccard chemical similarity scores. Here, it is used to determine what molecules in the dataset are most chemically similar to a reference chemical.
sessionInfo()
install.packages("RxnSim")
#requires Rtools
install.packages("dplyr")
packages <- c("readr","dplyr","utils", "RxnSim", "ggplot2")
lapply(packages, library, character.only = TRUE)
#The previous 2 lines make it easier to load packages and libraries without needing to enter library() every time
Chemical_List_EPAPCS_2022_04_11 <- read_csv("C:/Chemical List EPAPCS-2022-04-11.csv")
df_smiles_unfiltered <- select(Chemical_List_EPAPCS_2022_04_11, "PREFERRED NAME", "SMILES")
df_smiles <- na.omit(df_smiles_unfiltered)
#Cleaning up dataset by removing all entries without SMILES
molA <- "[H][C@@]12COC3=C(C=C(OC)C(OC)=C3)[C@]1([H])C(=O)C1=CC=C3O[C@H](CC3=C1O2)C(C)=C"
#This is the SMILES for Rotenone; defining molA as another SMILES value allows for comparisons of all kinds of pesticides.
df_smiles <- data.frame(lapply(df_smiles, as.character), stringsAsFactors = FALSE)
#For some reason, the df is seen as tables, not characters. This function forces all values to be characters
Tanimoto_coefficient <- vector("numeric",nrow(df_smiles))
#Preparing a container for the calculated coefficient
for(row in 1:nrow(df_smiles)){
calculation<- ms.compute(molA, df_smiles[row,"SMILES"], standardize = FALSE)
#This line repeats ms.compute for each row of df_smiles so that a comparison between Rotenone (=molA) and all other (available) pesticides (="SMILES") is made
#RxnSim also allows comparisons between each pesticide in a list by using the ms.compute.sim.matrix function.
Tanimoto_coefficient[row] <- calculation
}
df_smiles <- cbind (df_smiles,Tanimoto_coefficient)
#Tanimoto_coefficient is added to the df_smiles for easier viewing
df_smiles_sorted <- df_smiles[order(-df_smiles$Tanimoto_coefficient),]
View(df_smiles_sorted)
write.csv(df_smiles_sorted, file = "Tanimoto-coefficient-Rotenone.csv")
#Exports df_smiles_sorted to a .csv file with observations sorted in descending order according to their Tanimoto coefficient.
preferred_name <- df_smiles[,1]
p1 <- ggplot(data=df_smiles_sorted)+geom_col(mapping=aes(x= reorder(preferred_name,-Tanimoto_coefficient), y=Tanimoto_coefficient))
p1
#Comments refer to the code above them.
#This script generates Tanimoto/Jaccard chemical similarity scores. Here, it is used to determine what molecules in the dataset are most chemically similar to a reference chemical.
sessionInfo()
install.packages("RxnSim")
#requires Rtools
install.packages("dplyr")
packages <- c("readr","dplyr","utils", "RxnSim", "ggplot2")
lapply(packages, library, character.only = TRUE)
#The previous 2 lines make it easier to load packages and libraries without needing to enter library() every time
Chemical_List_EPAPCS_2022_04_11 <- read_csv("C:/Chemical List EPAPCS-2022-04-11.csv")
df_smiles_unfiltered <- select(Chemical_List_EPAPCS_2022_04_11, "PREFERRED NAME", "SMILES")
df_smiles <- na.omit(df_smiles_unfiltered)
#Cleaning up dataset by removing all entries without SMILES
molA <- "[H][C@@]12COC3=C(C=C(OC)C(OC)=C3)[C@]1([H])C(=O)C1=CC=C3O[C@H](CC3=C1O2)C(C)=C"
#This is the SMILES for Rotenone; defining molA as another SMILES value allows for comparisons of all kinds of pesticides.
df_smiles <- data.frame(lapply(df_smiles, as.character), stringsAsFactors = FALSE)
#For some reason, the df is seen as tables, not characters. This function forces all values to be characters
Tanimoto_coefficient <- vector("numeric",nrow(df_smiles))
#Preparing a container for the calculated coefficient
for(row in 1:nrow(df_smiles)){
calculation<- ms.compute(molA, df_smiles[row,"SMILES"], standardize = FALSE)
#This line repeats ms.compute for each row of df_smiles so that a comparison between Rotenone (=molA) and all other (available) pesticides (="SMILES") is made
#RxnSim also allows comparisons between each pesticide in a list by using the ms.compute.sim.matrix function.
Tanimoto_coefficient[row] <- calculation
}
df_smiles <- cbind (df_smiles,Tanimoto_coefficient)
#Tanimoto_coefficient is added to the df_smiles for easier viewing
df_smiles_sorted <- df_smiles[order(-df_smiles$Tanimoto_coefficient),]
View(df_smiles_sorted)
write.csv(df_smiles_sorted, file = "Tanimoto-coefficient-Rotenone.csv")
#Exports df_smiles_sorted to a .csv file with observations sorted in descending order according to their Tanimoto coefficient.
preferred_name <- df_smiles[,1]
p1 <- ggplot(data=df_smiles_sorted)+geom_col(mapping=aes(x= reorder(preferred_name,-Tanimoto_coefficient), y=Tanimoto_coefficient))
p1
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("webchem")
library(webchem)
install.packages("webchem")
install.packages("webchem")
library(readxl)
dataset <- read_excel("C:\Users\klemm\Downloads\ActiveSubstances.xls")
View(dataset)
library(webchem)
library(readxl)
dataset <- read_excel("C:\ActiveSubstances.xls")
library(readxl)
ActiveSubstances <- read_excel("C:/Users/klemm/Downloads/ActiveSubstances.xls")
View(ActiveSubstances)
library(webchem)
install.packages("RxnSim")
#Comments refer to the code above them.
#This script generates Tanimoto/Jaccard chemical similarity scores. Here, it is used to determine what molecules in the dataset are most chemically similar to a reference chemical.
sessionInfo()
install.packages("RxnSim")
#requires Rtools
install.packages("dplyr")
packages <- c("readr","dplyr","utils", "RxnSim", "ggplot2")
lapply(packages, library, character.only = TRUE)
#The previous 2 lines make it easier to load packages and libraries without needing to enter library() every time
Chemical_List_EPAPCS_2022_04_11 <- read_csv("C:/Chemical List EPAPCS-2022-04-11.csv")
df_smiles_unfiltered <- select(Chemical_List_EPAPCS_2022_04_11, "PREFERRED NAME", "SMILES")
df_smiles <- na.omit(df_smiles_unfiltered)
#Cleaning up dataset by removing all entries without SMILES
molA <- "[H][C@@]12COC3=C(C=C(OC)C(OC)=C3)[C@]1([H])C(=O)C1=CC=C3O[C@H](CC3=C1O2)C(C)=C"
#This is the SMILES for Rotenone; defining molA as another SMILES value allows for comparisons of all kinds of pesticides.
df_smiles <- data.frame(lapply(df_smiles, as.character), stringsAsFactors = FALSE)
#For some reason, the df is seen as tables, not characters. This function forces all values to be characters
Tanimoto_coefficient <- vector("numeric",nrow(df_smiles))
#Preparing a container for the calculated coefficient
for(row in 1:nrow(df_smiles)){
calculation<- ms.compute(molA, df_smiles[row,"SMILES"], standardize = TRUE)
#This line repeats ms.compute for each row of df_smiles so that a comparison between Rotenone (=molA) and all other (available) pesticides (="SMILES") is made
#RxnSim also allows comparisons between each pesticide in a list by using the ms.compute.sim.matrix function.
Tanimoto_coefficient[row] <- calculation
}
df_smiles <- cbind (df_smiles,Tanimoto_coefficient)
#Tanimoto_coefficient is added to the df_smiles for easier viewing
df_smiles_sorted <- df_smiles[order(-df_smiles$Tanimoto_coefficient),]
View(df_smiles_sorted)
write.csv(df_smiles_sorted, file = "Tanimoto-coefficient-Rotenone.csv")
#Exports df_smiles_sorted to a .csv file with observations sorted in descending order according to their Tanimoto coefficient.
preferred_name <- df_smiles[,1]
p1 <- ggplot(data=df_smiles_sorted)+geom_col(mapping=aes(x= reorder(preferred_name,-Tanimoto_coefficient), y=Tanimoto_coefficient))
p1
install.packages("dplyr")
class(ActiveSubstances)
get.csid(substance)
library(webchem)
get.csid(substance)
get_csid(substance)
?cs_check_key
usethis::edit_r_profile
install.packages("usethis")
library(usethis)
packages <- c("readxl", "usethis", "webchem")
lapply(packages, library, character.only = TRUE)
usethis::edit_r_profile(
usethis::edit_r_profile()
usethis::edit_r_profile()
usethis::edit_r_environ()
get_csid(substance)
?cs_check_key()
?cs_check_key()
get_csid(substance)
substance <- ActiveSubstances[,2]
get_csid(substance)
install.packages("webchem")
install.packages("usethis")
packages <- c("readxl", "usethis", "webchem")
lapply(packages, library, character.only = TRUE)
install.packages("usethis")
usethis::edit_r_environ()
substance <- ActiveSubstances[,2]
get_csid(substance)
View(susbtance)
View(substance0
View(substance)
View(substance)
class(substance)
substance <- c(ActiveSubstances[,2])
get_csid(substance)
View(substance)
class(substance)
lapply(get_csid(substance))
lapply(FUN=get_csid(substance))
lapply(FUN=get_csid())
get_csid((4Z-9Z)-7,9-Dodecadien-1-ol)
get_csid("(4Z-9Z)-7,9-Dodecadien-1-ol")
get_csid("
1-Naphthylacetic acid (1-NAA)")
for(row in 1:nrow(substance){csid <-get_csid(substance)}
for(row in 1:nrow(substance)){csid <-get_csid(substance)}
substance <- c(ActiveSubstances[,2])
for(row in 1:nrow(substance)){csid <-get_csid(substance)}
class(substance)
for(row in 1:nrow(substance)){csid <-get_csid(substance)}
for(row in 1:nrow("substance")){csid <-get_csid(substance)}
for(row in 1:nrow(ActiveSubstances[,2])){csid <-get_csid(substance)}
csid_list <- vector("numeric", nrow(ActiveSubstances))
View(csid)
install.packages("webchem")
packages <- c("readxl", "webchem")
lapply(packages, library, character.only = TRUE)
ActiveSubstances <- read_excel("C:/Users/klemm/Downloads/ActiveSubstances.xls")
View(ActiveSubstances)
substance <- c(ActiveSubstances[,2])
csid_list <- vector("numeric", nrow(ActiveSubstances))
for(row in 1:nrow(ActiveSubstances[,2]))  {
csid <-get_csid(substance)
csid_list[row] <- csid
}
View(substance)
View(csid_list)
install.packages("webchem")
for(row in 1:nrow(ActiveSubstances[,2]))  {
csid <-get_csid(ActiveSubstances[,2])
csid_list[row] <- csid
}
View(csid_list)
csid <-get_csid(ActiveSubstances[row,"Substance"])
csid_list[row] <- csid
for(row in 1:nrow(ActiveSubstances[,2]))  {
csid <-get_csid(ActiveSubstances[row,"Substance"])
csid_list[row] <- csid
}
#View(csid_list)
View(csid)
csid <-get_csid(c(ActiveSubstances[row,"Substance"]))
for(row in 1:nrow(ActiveSubstances[,2]))  {
csid <-get_csid(c(ActiveSubstances[row,"Substance"]))
}
View(csid)
View(ActiveSubstances[row,"Substance"])
ActiveSubstances <- read_excel("C:/Users/klemm/Downloads/ActiveSubstances.xls")
View(ActiveSubstances)
for(row in 1:nrow(ActiveSubstances[,2]))  {
csid <-get_csid(c(ActiveSubstances[row,"Substance"]))
}
substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(substance)
for(row in 1:nrow(ActiveSubstances[,2]))  {
substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(substance)
}
View(csid)
View(substance)
class(substance)
class9packages)
class(packages)
class(ActiveSubstances)
class(df_smiles)
ActiveSubstances <- data.frame(lapply(ActiveSubstances, as.character), stringsAsFactors = FALSE)
for(row in 1:nrow(ActiveSubstances[,2]))  {
substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(substance)
}
class(ActiveSubstances)
View(ActiveSubstances)
ActiveSubstances <- read_excel("C:/Users/klemm/Downloads/ActiveSubstances.xls")
ActiveSubstances <- data.frame(lapply(ActiveSubstances, as.character), stringsAsFactors = FALSE)
View(ActiveSubstances)
for(row in 1:nrow(ActiveSubstances[,2]))  {
substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(substance)
}
View(csid)
for(row in 1:nrow(ActiveSubstance))  {
substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(substance)
}
for(row in 1:nrow(ActiveSubstances))  {
substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(substance)
}
View(csid)
#substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(ActiveSubstances)
for(row in 1:nrow(ActiveSubstances))  {
#substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(ActiveSubstances)
}
View(csid)
get_csid(Azoxystrobin)
ping_service("cs")
ping_service("cs_web")
cs_check_key()
#substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(ActiveSubstances, match = "ask")
ping_service("cs")
install.packages("webchem")
packages <- c("readxl", "webchem")
lapply(packages, library, character.only = TRUE)
ping_service("cs")
#substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(ActiveSubstances[,2], match = "ask")
for(row in 1:nrow(ActiveSubstances))  {
#substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(ActiveSubstances[,2], match = "ask")
}
View(csid)
for(row in 1:nrow(ActiveSubstances))  {
#substance <- c(ActiveSubstances[row, "Substance"])
cid <-get_cid(ActiveSubstances[,2], match = "ask")
}
#substance <- c(ActiveSubstances[row, "Substance"])
cid <-get_cid(ActiveSubstances[row,2], verbose=TRUE)
install.packages("webchem")
packages <- c("readxl", "webchem")
lapply(packages, library, character.only = TRUE)
ActiveSubstances <- read_excel("C:/Users/klemm/Downloads/ActiveSubstances.xls")
ActiveSubstances <- data.frame(lapply(ActiveSubstances, as.character), stringsAsFactors = FALSE)
View(ActiveSubstances)
for(row in 1:nrow(ActiveSubstances))  {
#substance <- c(ActiveSubstances[row, "Substance"])
cid <-get_cid(ActiveSubstances[row,2], verbose=TRUE)
}
View(cid)
cid_list <- vector("numeric",nrow(ActiveSubstances))
for(row in 1:nrow(ActiveSubstances))  {
cid <-get_cid(ActiveSubstances[row,2], verbose=TRUE)
cid_list[row] <- cid
}
View(cid_list)
cid_list[[26]]
clear
library(readr)
pc_eup <- read_csv("C:/PubChem_compound_list_ElW0fZMu9pLBvH6l_N03iWB0JxQ494ui8YeQ7uqWgu_qj74.csv")
View(pc_eup)
#Installing packages
library(RCy3)
library(rWikiPathways)
library(knitr)
knitr:::input_dir()
#Setting working directory
cytoscapePing()
cytoscapeVersionInfo
#Pinging Cytoscape to check if it is properly running, and checking what version of Cytoscape is loaded
installApp('WikiPathways')
installApp('CyTargetLinker')
#Installing the WikiPathways and CyTargetLinker apps in Cytoscape
gbm.pathways <- findPathwaysByText("Parkinsonian")
commandsRun(paste0('wikipathways import-as-network id=',human.gbm.wpids[1]))
#Installing the WikiPathways and CyTargetLinker apps in Cytoscape
gbm.pathways <- findPathwaysByText("Parkinsonian")
commandsRun(paste0('wikipathways import-as-network id=',human.gbm.wpids[1]))
#Pinging Cytoscape to check if it is properly running, and checking what version of Cytoscape is loaded
installApp('WikiPathways')
installApp('CyTargetLinker')
#Installing the WikiPathways and CyTargetLinker apps in Cytoscape
gbm.pathways <- findPathwaysByText("Parkinsonian")
commandsRun(paste0('wikipathways import-as-network id=',human.gbm.wpids[1]))
commandsRun(paste0('wikipathways import-as-network id=',gbm.pathways[1]))
commandsRun(paste0('wikipathways import-as-network id=',human.gbm.wpids[1]))
commandsRun(paste0('wikipathways import-as-network id=',park.pathways[1]))
#Installing the WikiPathways and CyTargetLinker apps in Cytoscape
park.pathways <- findPathwaysByText("Parkinsonian")
commandsRun(paste0('wikipathways import-as-network id=',park.pathways[1]))
park.wpid <- park.pathways[[1]]$id
park.wpid <- park.pathways[[1]][id]
park.wpid <- park.pathways[[1]]$id
park.wpid <- park.pathways[[1]]["id"]
commandsRun(paste0('wikipathways import-as-network id=',park.pathways[1]))
park.wpid <- park.pathways["id"]
park.wpid <- park.pathways[[1]]["id"]
commandsRun(paste0('wikipathways import-as-network id=',park.pathways[1]))
commandsRun(paste0('wikipathways import-as-network id=',park.wpid)
commandsRun(paste0('wikipathways import-as-network id=',park.wpid))
commandsRun(paste0('wikipathways import-as-network id=',park.wpid, sep = "="))
park.wpid <- park.pathways[[1]]["id"]
commandsRun(paste0('wikipathways import-as-network id=',park.wpid))
park.wpid <- park.pathways[[1]]["id"]
commandsRun(paste0('wikipathways import-as-network id=',park.wpid))
park.wpid <- park.pathways[[2]]["id"]
commandsRun(paste0('wikipathways import-as-network id=',park.wpid))
park.wpid <- park.pathways[[1]]["id"]
lapply(park.pathways, function(x) commandsRun(paste('wikipathways import-as-network id=', x$id, sep = '')))
lapply(park.pathways, function(x) commandsRun(paste('wikipathways import-as-network id=', x["id"], sep = '')))
#Installing the WikiPathways and CyTargetLinker apps in Cytoscape
park.pathways <- findPathwaysByText("Parkinsonian")
View(park.pathways)
commandsRun(paste0('wikipathways import-as-network id=',park.wpid))
commandsRun(paste0('wikipathways import-as-network id=',"park.wpid"))
commandsRun(paste0('wikipathways import-as-network id=',"WP4945"))
#Importing the relevant Parkinsonian motor deficit pathway as network
hsa <- file.path(getwd(), "LinkSets", "wikipathways-20220511-hsa-WP.xgmml")
hsa_react <- file.path(getwd(), "LinkSets", "wikipathways-20220511-hsa-REACTOME.xgmml")
#Loading the WikiPathways linksets available at https://cytargetlinker.github.io/pages/linksets/wikipathways
CTLextend.cmd = paste('cytargetlinker extend idAttribute="XrefID" linkSetFiles="', hsa, ',', hsa_react, '" network=current direction=TARGETS', sep="")
commandsRun(CTLextend.cmd)
commandsRun(CTLextend.cmd)
#Loading the WikiPathways linksets available at https://cytargetlinker.github.io/pages/linksets/wikipathways
CTLextend.cmd = paste('cytargetlinker extend idAttribute="XrefID" linkSetFiles="', hsa, ',', hsa_react, '" network=current direction=TARGETS', sep="")
commandsRun(CTLextend.cmd)
commandsRun(CTLextend.cmd)
#Loading the WikiPathways linksets available at https://cytargetlinker.github.io/pages/linksets/wikipathways
CTLextend.cmd = paste('cytargetlinker extend idAttribute="XrefID" linkSetFiles="', hsa, ',', hsa_react, '" network=current direction=TARGETS', sep="")
commandsRun(CTLextend.cmd)
commandsRun(CTLextend.cmd)
#Setting working directory
cytoscapePing()
commandsRun(CTLextend.cmd)
#Loading the WikiPathways linksets available at https://cytargetlinker.github.io/pages/linksets/wikipathways
CTLextend.cmd = paste('cytargetlinker extend idAttribute="XrefID" linkSetFiles="', hsa, ',', hsa_react, '" network=current direction=TARGETS', sep="")
commandsRun(CTLextend.cmd)
library(readr)
epapcs <- read_csv("Data/Chemical List EPAPCS-2022-04-11.csv")
pc_eup <- read_csv("Data/PubChem_compound_list_ElW0fZMu9pLBvH6l_N03iWB0JxQ494ui8YeQ7uqWgu_qj74.csv")
pc_agr <- read_csv("Data/PubChem_compound_list_o-QFwS1hSN1_90ruyJYDwlQ_i1-vbTmhQ4Qi7ViVMOxYjAw.csv")
setwd("~/GitHub/SMILES-tanimoto")
library(readr)
epapcs <- read_csv("Data/Chemical List EPAPCS-2022-04-11.csv")
pc_eup <- read_csv("Data/PubChem_compound_list_ElW0fZMu9pLBvH6l_N03iWB0JxQ494ui8YeQ7uqWgu_qj74.csv")
pc_agr <- read_csv("Data/PubChem_compound_list_o-QFwS1hSN1_90ruyJYDwlQ_i1-vbTmhQ4Qi7ViVMOxYjAw.csv")
