  #Comments refer to the code above them.
sessionInfo(NULL)
install.packages("RxnSim")
  #requires Rtools
install.packages("dplyr")
packages <- c("readr","dplyr","utils", "RxnSim")
lapply(packages, library, character.only = TRUE)
  #The previous 2 lines make it easier to load packages and libraries without needing to enter library() every time

Chemical_List_EPAPCS_2022_04_09 <- read_csv("C:/Chemical List EPAPCS-2022-04-09.csv")
df_smiles_unfiltered <- select(Chemical_List_EPAPCS_2022_04_09, "PREFERRED NAME", "SMILES")
df_smiles <- na.omit(df_smiles_unfiltered) 
  #Cleaning up dataset by removing all entries without SMILES
df_smiles[, 'Similarity'] <- NA 
  #Adding a third column to df_smiles where the similarity values will be added upon calculation
View(df_smiles)

molA <- "[H][C@@]12COC3=C(C=C(OC)C(OC)=C3)[C@]1([H])C(=O)C1=CC=C3O[C@H](CC3=C1O2)C(C)=C" 
  #This is the SMILES for Rotenone; defining molA as another SMILES value allows for comparisons of all kinds of pesticides.
df_smiles <- data.frame(lapply(df_smiles, as.character), stringsAsFactors = FALSE) 
  #For some reason, the df is seen as tables, not characters. This function forces all values to be characters
for(row in 1:nrow(df_smiles)){calculation <-ms.compute(molA, df_smiles[row,"SMILES"], standardize = FALSE)
  #This line repeats ms.compute for each row of df_smiles so that a comparison between Rotenone (=molA) and all other (available) pesticides (= "SMILES") is made
  #RxnSim also allows comparisons between each pesticide in a list by using the ms.compute.sim.matrix function.
print(calculation)}
